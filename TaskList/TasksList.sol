
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract TasksList {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    
    uint32 numberOfOpenTasks = 0; 
    uint8 count = 0;


    mapping(uint8 =>Task) tasksArray;
    

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        
    }
    modifier checkOwnerAndAccept {
        require(tvm.pubkey()==msg.pubkey(),102);
        tvm.accept();
        _;
    }

    function addTask (string nameOfTask) public checkOwnerAndAccept {
        Task t = Task(nameOfTask,now,false);
        tasksArray[count]=t;
        count++;
        numberOfOpenTasks++;
    } 

    function getNumberOfOpenTasks () public checkOwnerAndAccept returns(uint){
        return numberOfOpenTasks;
    }

    function getListOfTasks () public checkOwnerAndAccept returns(Task[]){
        require(count!=0, 404);
        Task[] list;
        for(uint8 i =0;i<count;i++){
            if(tasksArray.exists(i)){
                list.push(tasksArray[i]);
            }
        }
        return list;
    }

    function getDescriptionOfTask (uint8 key) public checkOwnerAndAccept returns (Task){
        require(tasksArray.exists(key),404);
        return tasksArray[key];
    }

    function delTask (uint8 key) public checkOwnerAndAccept {
        require(tasksArray.exists(key),404);
        if (tasksArray[key].isDone==false)
            numberOfOpenTasks--;
        delete tasksArray[key];
    }

    function doneTask (uint8 key) public checkOwnerAndAccept {
        require(tasksArray.exists(key),404);
        require(!tasksArray[key].isDone,208);
        tasksArray[key].isDone=true;
        numberOfOpenTasks--;
    }


    
    struct Task {
        string name;
        uint32 timestamp;
        bool isDone;
    }
}
