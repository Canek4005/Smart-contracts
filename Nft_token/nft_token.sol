
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract nft_token {
    
    struct Token{
        string name;
        string quality;
        string description;
        
    }
    
    Token[] tokensArr;

    mapping(uint=>uint) tokenToOwner;
    mapping (uint=>uint) shop;

    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        
    }
    // проверка на соответствие ключей и оплата
    modifier checkOwnerAndAccept{
        require(tvm.pubkey()==msg.pubkey(),102);
        tvm.accept();
        _;
    }
    //проверка на право владения токеном
    modifier verificationOfTokenOwnership(uint tokenId){
        require(msg.pubkey()==tokenToOwner[tokenId],101);
        _;
    }

    function CreateToken(string name,string quality,string desk) public checkOwnerAndAccept {
        uint key = tokensArr.length;
        for(uint i=0;i<tokensArr.length;i++){
            require(tokensArr[i].name!=name,208);
        }
        tokensArr.push(Token(name,quality,desk));
        tokenToOwner[key]=msg.pubkey();
    } 
    function getTokenInfo(uint tokenId) public view returns(Token) {
        return tokensArr[tokenId];
    }
    function getTokenOwner (uint tokenId) public view returns(uint){
        return tokenToOwner[tokenId];
    }

    // изменить свойство качество
    function ChangeQuality(uint tokenId, string quality) public checkOwnerAndAccept verificationOfTokenOwnership(tokenId){
        
        tokensArr[tokenId].quality = quality;
    }
    // изменить свойство description
    function ChangeDescription(uint tokenId, string description) public checkOwnerAndAccept verificationOfTokenOwnership(tokenId){
        
        tokensArr[tokenId].description = description;
    }
    // выставление на продажу токенов
    function SendToTheStore(uint tokenId, uint price) public checkOwnerAndAccept verificationOfTokenOwnership(tokenId){
               
        //проверка на отсутствие в магазине
        require(!shop.exists(tokenId), 208);    
        //выставление на продажу
        shop[tokenId]=price;
    }
    // Просмотр выставленных на продажу токенов
    function showShop() public returns(mapping(uint=>uint)) {
        return shop;        
    }
    

    
}
